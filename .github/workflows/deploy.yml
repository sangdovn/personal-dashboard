name: Deploy Personal Dashboard App

on:
  push:
    branches:
      - master
  workflow_dispatch: # Allow manual triggering

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/personal-dashboard:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/personal-dashboard:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/personal-dashboard:buildcache,mode=max

      - name: Copy docker-compose.yml to Server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "docker-compose.yml"
          target: "~/personal-dashboard"

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # Login to Docker Hub
            echo ${{ secrets.DOCKER_HUB_PASSWORD }} | docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

            # Create deployment directory if it doesn't exist
            mkdir -p ~/personal-dashboard
            cd ~/personal-dashboard

            # Set environment variables for docker-compose
            echo "DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}" > .env
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env

            # Pull latest image and deploy with docker-compose
            docker-compose pull
            docker-compose down --remove-orphans
            docker-compose up -d

            # Clean up old images
            docker image prune -af --filter "until=24h"
